#!/usr/bin/env bash
# setup.sh - generate .env and prepare ./projects
# macOS / Linux / WSL2 前提
set -euo pipefail

ROOT_DIR="$(cd "$(dirname "$0")" && pwd)"
PROJECTS_DIR="${ROOT_DIR}/projects"
ENV_FILE="${ROOT_DIR}/.env"

# ---- options ---------------------------------------------------------------
TZ_V="${TZ:-Asia/Tokyo}"
FORCE_DISPLAY=""
SW_RENDER=0  

usage() {
  cat <<USAGE
Usage: $0 [--hw] [--sw] [--display HOST:DISP] [--tz TZ]
  --hw                ハードウェア描画寄りに（デフォルト）
  --sw                ソフトウェア描画を強制
  --display VAL       DISPLAY を明示指定（例: 172.24.160.1:0）
  --tz TZ             タイムゾーン（既定: Asia/Tokyo）
USAGE
}
while [ $# -gt 0 ]; do
  case "$1" in
    --hw) SW_RENDER=0 ;;
    --sw) SW_RENDER=1 ;;
    --display) shift; FORCE_DISPLAY="${1:-}";;
    --tz) shift; TZ_V="${1:-Asia/Tokyo}";;
    -h|--help) usage; exit 0 ;;
    *) echo "unknown arg: $1"; usage; exit 2 ;;
  esac
  shift
done

# ---- prepare projects/ -----------------------------------------------------
if [ ! -d "${PROJECTS_DIR}" ]; then
  mkdir -p "${PROJECTS_DIR}"
  echo "[setup] created ${PROJECTS_DIR}"
else
  echo "[setup] ${PROJECTS_DIR} exists"
fi

# ---- detect XDISPLAY -------------------------------------------------------
if [ -n "${FORCE_DISPLAY}" ]; then
  XDISPLAY="${FORCE_DISPLAY}"
else
  uname_s="$(uname -s)"
  if [ "${uname_s}" = "Darwin" ]; then
    # macOS + Docker Desktop + XQuartz 前提
    XDISPLAY="host.docker.internal:0"
  elif [ "${uname_s}" = "Linux" ]; then
    if grep -qi microsoft /proc/version 2>/dev/null; then
      # WSL2: Windows 側 X サーバへ
      XDISPLAY="$(awk '/nameserver/{print $2;exit}' /etc/resolv.conf):0"
    else
      # 素の Linux
      XDISPLAY="${DISPLAY:-:0}"
    fi
  else
    # 想定外は mac と同じ既定
    XDISPLAY="host.docker.internal:0"
  fi
fi

# ---- write .env ------------------------------------------------------------
{
  echo "# generated by setup.sh"
  echo "XDISPLAY=${XDISPLAY}"
  echo "TZ=${TZ_V}"

  if [ "${SW_RENDER}" -eq 1 ]; then
    echo "LIBGL_ALWAYS_INDIRECT=1"
    echo "LIBGL_ALWAYS_SOFTWARE=1"
    echo "MESA_LOADER_DRIVER_OVERRIDE=swrast"
    echo 'PRISM_OPTS=-Dprism.order=sw -Dprism.vsync=false -Dprism.allowhidpi=false'
    echo 'AWT_OPTS=-Dsun.java2d.xrender=true -Dsun.java2d.pmoffscreen=false'
  else
    # ハードウェア寄り。必要なら個別に上書きしてください
    echo "LIBGL_ALWAYS_INDIRECT="
    echo "LIBGL_ALWAYS_SOFTWARE="
    echo "MESA_LOADER_DRIVER_OVERRIDE="
    echo "PRISM_OPTS="
    echo "AWT_OPTS="
  fi
  # JDK 内部APIへの開放（JFXPanel 警告回避）
  echo 'FX_OPENS=--add-opens java.base/sun.nio.ch=ALL-UNNAMED --add-opens java.base/java.io=ALL-UNNAMED'
} > "${ENV_FILE}"

echo "[ok] .env written:"
cat "${ENV_FILE}"
echo "[ok] done"
